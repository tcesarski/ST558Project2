---
title: "ST 558 Project 2"
format: html
author: "Taylor Cesarski"
---
This page represents my beginning stages of work, thought process when generating static functions and plots, trying different plots, trying special cases with spaces, etc. All parts that were used in the final coding are in the server or UI file with appropriate commenting there. I just left this here to show my initial work. This section may be a bit messy in terms of things deleted that were not used or fixed later in the server/UI files. For example, I did not end up using my wrapper function created since I instead used if/else logic and did not use some graphs I created due to extreme outliers distorting the graphs.

```{r}
install.packages("tidyverse")
install.packages("shiny")
install.packages("jsonlite")
install.packages("httr")
install.packages("treemapify")
install.packages("shinydashboard")






library(shiny)
search()
library(tidyverse)
library(jsonlite)
library(httr)
#Get all info about a country. Type all to get all countries.

get_country_info <- function(country_name, chosen_cols){
  #Store the base url before the inputs as start_url.
  start_url <- "https://restcountries.com/v3.1/"
  #Based on documentation provided on API, paste together formatting of initial url, and inputs for what the final url should look like.. Use paste0 to not add spaces.
encoded_name <- URLencode(country_name)
  
  if(country_name == "All Countries"){
    url <- paste0(start_url, "all")
  }
  else{
    url <- paste0(start_url,
                  "name/",
                  encoded_name)
  }
print(url)
  #Use the GET function to contact API.
  return_data <- GET(url)
  #Parse through data using fromJSON function from jsonlite package.
  parsed_data <- fromJSON(rawToChar(return_data$content))
  exact_match <- parsed_data$name$common == country_name
  tibble_info <- as_tibble(parsed_data[exact_match, ])

  tibble_info <- tibble(
    Country_Name = tibble_info$name$common,
    #Deal with missing values for capital.
    Capital = ifelse(is.null(tibble_info$capital), NA, 
                     as.character(tibble_info$capital)),
    Region = tibble_info$region,
    #Deal with missing values for subregion.
    Subregion = ifelse(is.null(tibble_info$subregion), NA, 
                     as.character(tibble_info$subregion)),
    Area = tibble_info$area,
    Population = tibble_info$population,
    Car_Side_Driving = tibble_info$car$side,
    Independence = ifelse(is.null(tibble_info$independent), NA, 
                       as.character(tibble_info$independent)),
    Landlocked = tibble_info$landlocked,
    UN_Member = tibble_info$unMember)
  
  tibble_info <- tibble_info |>
    select(Country_Name, chosen_cols)
  
  return(tibble_info)
}


get_country_info("France", c("Region", "Subregion"))
get_country_info("United States", c("Region", "Population"))
get_country_info("All Countries", c("Region", "Area"))
get_country_info("China", "Region")



get_country_info <- function(country_name){
#Store the base url before the inputs as start_url.
  start_url <- "https://restcountries.com/v3.1/"
  
  encoded_name <- URLencode(country_name)
#Based on documentation provided on API, paste together formatting of initial url, and inputs for what the final url should look like.. Use paste0 to not add spaces.
  if(country_name == "all"){
    url <- paste0(start_url,
                  "all")
  }
  else{
  url <- paste0(start_url,
                "name/",
                encoded_name)
  }
#Use the GET function to contact API.
    return_data <- GET(url)
#Parse through data using fromJSON function from jsonlite package.
  parsed_data <- fromJSON(rawToChar(return_data$content))
  #Convert the article information to a tibble.
tibble_info <- as_tibble(parsed_data)

#Return ed_info tibble.
tibble_info <- tibble(
  Country_Name = parsed_data$name$common,
  Capital = as.character(parsed_data$capital),
  Region = parsed_data$region,
  Subregion = parsed_data$subregion,
  Area = parsed_data$area,
  Population = parsed_data$population,
  Car_Side_Driving = parsed_data$car$side,
  Independence = parsed_data$independent,
  Landlocked = parsed_data$landlocked,
  UN_Member = parsed_data$unMember)
  
return(tibble_info)
}

get_country_info("germany")
get_country_info("all")
get_country_info("zambia")
get_country_info("all")
get_country_info("caribbean netherlands")
get_country_info("bouvet island")
country <- get_country_info("all")
get_country_info("Heard Island and Mcdonald Islands")
country
get_country_info("Macau")
```
Function 2
```{r}
#Get all info about countries from a particular region.
get_region_info <- function(region_name){
#Store the base url before the inputs as start_url.
  start_url <- "https://restcountries.com/v3.1/region/"
#Based on documentation provided on API, paste together formatting of initial url, and inputs for what the final url should look like.. Use paste0 to not add spaces.
  url <- paste0(start_url, 
                region_name)
#Use the GET function to contact API.
    return_data <- GET(url)
#Parse through data using fromJSON function from jsonlite package.
  parsed_data <- fromJSON(rawToChar(return_data$content))
#Convert the article information to a tibble.
tibble_info <- as_tibble(parsed_data)
#Return as an integer using map_int. Apply the length function.

#Return ed_info tibble.
tibble_info <- tibble(
  Country_Name = parsed_data$name$common,
  Capital = as.character(parsed_data$capital),
  Region = parsed_data$region,
  Subregion = parsed_data$subregion,
  Area = parsed_data$area,
  Population = parsed_data$population,
  Car_Side_Driving = parsed_data$car$side,
  Independence = parsed_data$independent,
  Landlocked = parsed_data$landlocked,
  UN_Member = parsed_data$unMember) |>

  arrange(Country_Name)

return(tibble_info)

}
get_region_info("africa")
get_region_info("asia")
get_region_info("oceania")
eur_info <- get_region_info("europe")
get_region_info("americas")
get_region_info("antarctic", "Subregion")

```

Get all info about countries that speak a particular language.

```{r}
#Get all info about countries from a particular region.
get_language_info <- function(language_name){
#Store the base url before the inputs as start_url.
  start_url <- "https://restcountries.com/v3.1/lang/"
#Based on documentation provided on API, paste together formatting of initial url, and inputs for what the final url should look like.. Use paste0 to not add spaces.
  url <- paste0(start_url, 
                language_name)
#Use the GET function to contact API.
    return_data <- GET(url)
#Parse through data using fromJSON function from jsonlite package.
  parsed_data <- fromJSON(rawToChar(return_data$content))
#Convert the article information to a tibble.
tibble_info <- as_tibble(parsed_data)

tibble_info <- tibble(
  Country_Name = parsed_data$name$common,
  Capital = as.character(parsed_data$capital),
  Region = parsed_data$region,
  Subregion = parsed_data$subregion,
  Area = parsed_data$area,
  Population = parsed_data$population,
  Car_Side_Driving = parsed_data$car$side,
  Independence = parsed_data$independent,
  Landlocked = parsed_data$landlocked,
  UN_Member = parsed_data$unMember) |>
  
  arrange(Country_Name)

return(tibble_info)
}
get_language_info("spanish")
get_language_info("maori")
lang_info <- get_language_info("spanish")

```

```{r}
#Get all info about countries from a particular region.
get_pop_info <- function(min_pop = 0, max_pop = 2000000000){
#Store the base url before the inputs as start_url.
  start_url <- "https://restcountries.com/v3.1/all/"
#Based on documentation provided on API, paste together formatting of initial url, and inputs for what the final url should look like.. Use paste0 to not add spaces.
#Use the GET function to contact API.
    return_data <- GET(start_url)
#Parse through data using fromJSON function from jsonlite package.
  parsed_data <- fromJSON(rawToChar(return_data$content))
#Convert the article information to a tibble.
tibble_info <- as_tibble(parsed_data)

#Return ed_info tibble.
tibble_info <- tibble(
  Country_Name = parsed_data$name$common,
  Capital = as.character(parsed_data$capital),
  Region = parsed_data$region,
  Subregion = parsed_data$subregion,
  Area = parsed_data$area,
  Population = parsed_data$population,
  Car_Side_Driving = parsed_data$car$side,
  Independence = parsed_data$independent,
  Landlocked = parsed_data$landlocked,
  UN_Member = parsed_data$unMember)

tibble_info <- tibble_info |>
  filter(Population >= min_pop & Population <= max_pop) |>
  arrange(Country_Name)

return(tibble_info)
}
get_pop_info(1000, 2000)

popinfo <- get_pop_info(10, 100000000)
help("downloadHandler")


```

```{r}
#Get all info about countries from a particular region.
get_area_info <- function(min_area = 100, max_area = 100000){
#Store the base url before the inputs as start_url.
  start_url <- "https://restcountries.com/v3.1/all/"
#Based on documentation provided on API, paste together formatting of initial url, and inputs for what the final url should look like.. Use paste0 to not add spaces.
#Use the GET function to contact API.
    return_data <- GET(start_url)
#Parse through data using fromJSON function from jsonlite package.
  parsed_data <- fromJSON(rawToChar(return_data$content))
#Convert the article information to a tibble.
tibble_info <- as_tibble(parsed_data)

#Return ed_info tibble.
tibble_info <- tibble(
  Country_Name = parsed_data$name$common,
  Capital = as.character(parsed_data$capital),
  Region = parsed_data$region,
  Subregion = parsed_data$subregion,
  Area = parsed_data$area,
  Population = parsed_data$population,
  Car_Side_Driving = parsed_data$car$side,
  Independence = parsed_data$independent,
  Landlocked = parsed_data$landlocked,
  UN_Member = parsed_data$unMember)

tibble_info <- tibble_info |>
  filter(Area >= min_area & Area <= max_area) |>
  arrange(Country_Name)

return(tibble_info)
}

get_area_info(0, 200)
```




```{r, error = TRUE}

#Change min default to lowest population, change max default to max population.
wrapper_function <- function(function_type, name, min = 0, max = 2000000000){
  if(function_type == "name"){
    return(get_country_info(name))
  } else if(function_type == "region"){
    return(get_region_info(name))
  } else if(function_type == "language"){
    return(get_language_info(name))
  } else if(function_type == "population"){
    return(get_pop_info(min, max))
  } else if(function_type == "area"){
    return(get_area_info(min, max))
  } else{
    print("Error. Invalid Data Type")
  }
}

get_language_info("maori")

wrapper_function("name", "france")
wrapper_function("region", "americas")
wrapper_function("population", min =10, max =100)
```


#Create graphical and numerical summaries.

Make one way contingency table for: Independence, Car Side Driving, UN Members, and Landlocked countries based on all countries in a particular region or those who speak a certain language. 
```{r, error = TRUE}
get_ind_table <- function(type, input_name){
  if(type == "region"){
  new_tibble <- wrapper_function("region", input_name)
  }
  else if(type == "language"){
  new_tibble <- wrapper_function("language", input_name)
  }
  else{
    print("Error. Invalid inputs.")
  }
  table(new_tibble$Independence)
}

get_ind_table("language", "spanish")
get_ind_table("region", "americas")


get_car_table <- function(type, input_name){
  if(type == "region"){
  new_tibble <- wrapper_function("region", input_name)
  }
  else if(type == "language"){
  new_tibble <- wrapper_function("language", input_name)
  }
  else{
    print("Error. Invalid inputs.")
  }
  table(new_tibble$Car_Side_Driving)
}

get_car_table("region", "americas")

#UN Member table. 

get_un_table <- function(type, input_name){
  if(type == "region"){
  new_tibble <- wrapper_function("region", input_name)
  }
  else if(type == "language"){
  new_tibble <- wrapper_function("language", input_name)
  }
  else{
    print("Error. Invalid inputs.")
  }
  table(new_tibble$UN_Member)
}

get_un_table("language", "french")
get_un_table("region", "oceania")


#Get landlocked table.

get_landlocked_table <- function(type, input_name){
  if(type == "region"){
  new_tibble <- wrapper_function("region", input_name)
  }
  else if(type == "language"){
  new_tibble <- wrapper_function("language", input_name)
  }
  else{
    print("Error. Invalid inputs.")
  }
  table(new_tibble$Landlocked)
}

get_landlocked_table("language", "english")


#Put together helper functions in a wrapper function.

get_table <- function(table_type, type, input_name){
  if(table_type == "ind"){
    get_ind_table(type, input_name)
  } else if(table_type == "un"){
    get_un_table(type, input_name)
  } else if(table_type == "car"){
    get_car_table(type, input_name)
  } else if(table_type == "landlocked"){
    get_landlocked_table(type, input_name)
  }
}

get_table("ind", "language", "spanish")
get_table("car", "language", "english")
get_table("landlocked", "region", "africa")
get_table("un", "region", "americas")



```




```{r, error = TRUE}
europe_data <- wrapper_function("region", "europe")

car_side_table <- table(europe_data$Car_Side_Driving)
car_side_table

asia_data <- wrapper_function("region", "asia")
car_side_table <- table(asia_data$Car_Side_Driving)
car_side_table



#Create one way contingency table of side of the road driving.

get_car_table <- function(type, input_name){
  if(type == "region"){
  new_tibble <- wrapper_function("region", input_name)
  }
  else if(type == "language"){
  new_tibble <- wrapper_function("language", input_name)
  }
  else{
    print("Error. Invalid inputs.")
  }
  table(new_tibble$Car_Side_Driving)
}

get_car_table("language", "french")

```
Create a two way contingency table based on independence and car side driving by region or language.
```{r, error = TRUE}







get_car_and_ind_table <- function(type, input_name){
  if(type == "region"){
  new_tibble <- wrapper_function("region", input_name) |>
    drop_na()
  }
  else if(type == "language"){
  new_tibble <- wrapper_function("language", input_name) |>
    drop_na()
  }
  else{
    print("Error. Invalid inputs.")
  }
  table(new_tibble$Car_Side_Driving, new_tibble$Independence)
  }

get_car_and_ind_table("region", "africa")

two_contingency_table <- reactive({
    req(input$summary, input$con_tab, input$cat1_tab & input$cat2_tab)
    if(input$summary == "Contingency Tables" & input$con_tab == "Two Way"){
      cat1_variable <- input$cat1_tab
      cat2_variable <- input$cat2_tab
      two_cat_data <- filtered_data()
      
      
      con_two_table <- table(two_cat_data[[cat1_variable]], two_cat_data[[cat2_variable]])
      return(con_two_table)
    } else{
      NULL
    }
  })
  
country
as_tibble(table(country[["UN_Member"]], country[["Landlocked"]]))


str(table(country[["UN_Member"]], country[["Landlocked"]]))

country |>
  drop_na(UN_Member, Landlocked) |>
  group_by(UN_Member, Landlocked) |>
  summarize(count = n()) |>
  pivot_wider(names_from = Landlocked, values_from = count)


help(pivot_wider)
help(as_tibble)



help(as_tibble)
table(country[["Landlocked"]])
      
      con_two_table |>
        pivot_wider(names_from = cat2_variable, values_from = cat1_variable)




  output$contingency_two_tab <- renderTable({
    two_contingency_table()
  })
  
  numeric_summaries <- reactive({
    req(input$summary, input$num_sum, input$cat_sum)
    if(input$summary == "Numerical Summaries"){
      numeric_variable <- input$num_sum
      categorical_variable <- input$cat_sum
      dataset <- filtered_data()
      
      tibble_sum <- get_num_sum(dataset, get(numeric_variable), get(categorical_variable))
      colnames(tibble_sum)[1] <- categorical_variable
      return(tibble_sum)
      
    }
  })
    tib_sum <- table(country[["Car_Side_Driving"]], country[["UN_Member"]])
  colnames(tib_sum)[1] <- "UN_Member"
  tib_sum




```

# Function 1: Tree Map

```{r, error = TRUE}
install.packages("treemapify")
library(treemapify)

data_input <- wrapper_function("name", "all")
data_input

#Create population treemap of top x number of countries.

pop_treemap <- function(input_data, cat_tree){
  g <- ggplot(input_data |> drop_na(cat_tree), aes(area = Population, fill = Population, label = Country_Name)) +
  geom_treemap() +
  scale_fill_gradient(low = "lightpink", high = "red") +
  labs(title = paste0("Population Treemap by ", cat_tree),
       fill = "Population") +
  geom_treemap_text(color = "black", place = "center", grow = TRUE) +
    facet_wrap(cat_tree)
  
  print(g)
}

pop_treemap(eur_info, "Independence")

#Create area treemap of top x number of countries.

area_treemap <- function(input_data, x){
  df_arranged <- arrange(input_data, -Area)
  df_top <- head(df_arranged, x)
  g <- ggplot(df_top |> drop_na(x), aes(area = Area, fill = Area, label = Country_Name)) +
  geom_treemap() +
  scale_fill_gradient(low = "lightpink", high = "red") +
  labs(title = "Area Treemap",
       fill = "Area") +
  geom_treemap_text(color = "black", place = "center", grow = TRUE)
  
  print(g)
}

#Wrapper function to get either area or population treemap.

wrap_treemap <- function(input_type, df, x){
  if(input_type == "area"){
    area_treemap(df, x)
  } else if(input_type == "population"){
    pop_treemap(df, x)
  } else{
    print("Error in inputs.")
  }
}

area_treemap(data_input, 20)

wrap_treemap("area", data_input, 25)
wrap_treemap("population", data_input, 30)
```

# Final Plot # 2: Faceting and dynamically generating histogram.

Get boxplots of population and area by region or subregion.
```{r, error = TRUE}
#Get histograms of population by region.
library(ggplot2)

get_histogram <- function(input_data, x_val, y_val){
  g <- ggplot(input_data |> drop_na({{y_val}}), aes_string(x = x_val, fill = y_val)) +
    geom_histogram(bins = 20) +
    facet_wrap(y_val) +
    scale_fill_discrete(name = y_val) +
    scale_x_continuous(labels = scales::number_format()) +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
    labs(x = x_val,
         y = "Count",
         title = paste0(x_val, " by ", y_val))
  
  print(g)
}

pop <- wrapper_function("population", min = 100, max = 10000)
pop
class(pop)


get_histogram(data_input, "Population", "Region")
get_histogram(data_input, "Area", "Independence")
get_histogram(data_input, "Population", "UN_Member")
get_histogram(data_input, "Area", "Car_Side_Driving")
get_histogram(pop, "Population", "Region")


```
Create scatterplot of area and population and color code by region or  subregion.
```{r, error = TRUE}
plot_g <- function(data, x_val, y_val, color){
  ggplot(data, aes_string(x = x_val, y = y_val, color = color)) +  geom_point() +
  labs(x = x_val,
       y = y_val, 
       color = color)
}
plot_g(country, "Population", "Area", "Region")

```
# Function 2 - Final (Grouped Bar Chart)
Grouped Bar Chart. User choose two categorical variables.
```{r}

get_bar <- function(data_input, cat1, cat2){
  ggraph <- ggplot(data_input |> drop_na(cat2) |> drop_na(cat1), aes_string(x = cat1, fill = cat2))
  ggraph + geom_bar() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  labs(x = cat1,
       y = "Count",
       title = paste0("Countries by ", cat1, " and ", cat2))
}

get_bar(data_input, "Car_Side_Driving", "UN_Member")

get_bar(data_input, "Region", "UN_Member")

get_bar(data_input, "Subregion", "Independence")

get_bar(data_input, "Region", "Subregion")



ggraph <- ggplot(data_input, aes(x = Car_Side_Driving, fill = UN_Member))
ggraph + geom_bar()



```
# Function 3: Scatterplot of Population and Area by Region or Subregion.
```{r, error = TRUE}
plot_g <- ggplot(country, aes(x = Area, y = Population, color = UN_Member)) +  geom_point() +
  labs(x = "Population",
       y = "Area", 
       fill = "Independence")

plot_g

#Numerical Summaries
country
get_num_sum <- function(dataframe, num_variable, cat_variable){
  dataframe |>
    group_by({{cat_variable}}) |>
    summarize(
      Mean = mean({{num_variable}}, na.rm = TRUE),
      Stdev = sd({{num_variable}}, na.rm = TRUE),
      Min = min({{num_variable}}, na.rm = TRUE),
      Q1 = quantile({{num_variable}}, 0.25, na.rm = TRUE),
      Median = median({{num_variable}}, na.rm = TRUE),
      Q3 = quantile({{num_variable}}, 0.75, na.rm = TRUE),
      Max = max({{num_variable}}, na.rm = TRUE)
    )
}

      tibble_sum <- get_num_sum(country, Population, Region)
      str(tibble_sum)




get_num_sum(country, Population, UN_Member)


help("sidebarMenu")
#id comes first, then menuItems
help("dashboardBody")
#include tab items, boxes

#Make boxplot.


plot_dotplot<- ggplot(data_input, aes(x = Region, y = Population, fill = Region)) +
  geom_boxplot()

plot_boxplot

make_dot <- function(input_data, num_var, cat_var){
  ggplot(input_data |> drop_na(num_var) |> drop_na(cat_var), aes_string(x = num_var, y = cat_var))+
    geom_violin(scale = "count", adjust = 1.5)
}

make_box(country, "Population", "Region")

install.packages("maps")
library(maps)


#Make a dotplot.

make_dot <- function(data_value, quant_var, cat_var){
  ggplot(data = data_value, aes_string(x = quant_var, fill = cat_var)) +
    geom_dotplot(position = "dodge") +
    labs(x = quant_var,
         y = "Count") +
    scale_fill_discrete(name = cat_var)
}
make_dot(country, "Population", "UN_Member")


#geom point and smooth. facet by cat var

get_scatter <- function(input_data, facet_var){
  g <- ggplot(input_data |> drop_na({{facet_var}}), aes_string(x = "Population", y = "Area", color = facet_var)) +
    geom_point() +
    geom_smooth(method = lm) +
    facet_wrap(facet_var)
  print(g)
}

get_scatter(country, "Subregion")








```

```{r}
install.packages("shinydashboard")
library(shinydashboard)
```

```{r}
country <- country |>
  arrange(Country_Name)
country


get_country_info()
get_country_info("All Countries", 1:5)
```
Working on code for readme file.
```{r}
req_packages <- c("tidyverse", "shiny", "shinydashboard", "jsonlite", "httr", "treemapify")

read_in_pkgs <- function(){
  library(tidyverse)
  library(shiny)
  library(shinydashboard)
  library(jsonlite)
  library(httr)
  library(treemapify)
}
read_in_pkgs()
rm(list = ls())

  library(tidyverse)
  library(shiny)
  library(shinydashboard)
  library(jsonlite)
  library(httr)
  library(treemapify)


help("tags")

```


